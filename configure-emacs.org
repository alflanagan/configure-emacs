#+TITLE: Emacs Initialization and Setup
#+AUTHOR: A. Lloyd Flanagan
#+EMAIL: a.lloyd.flanagan@gmail.com
#+PROPERTY: cache yes
#+PROPERTY: tangle yes

# Emacs Initialization and Setup

** A Primer And Example

*** Introduction

Emacs is a great editor.

** say "hello"
#+begin_src emacs-lisp tangle: yes
  (message "loaded configure-emacs")
#+end_src

** A function to load files

This is like `load', except that it checks the file extension and does
the right thing for .org files that have embedded code sections.

#+begin_src emacs-lisp
  ;; more or less straight steal from emacs24-starter-kit (https://eschulte.github.io/emacs24-starter-kit/)
  (defun emess-load-file (base)
    "Load file with name `base', checking multiple file extensions"
    (let* ((path  (expand-file-name base user-emacs-directory))
           (literate      (concat path ".org"))
           (encrypted-org (concat path ".org.gpg"))
           (plain         (concat path ".el"))
           (encrypted-el  (concat path ".el.gpg")))
      (cond
       ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
       ((file-exists-p encrypted-el)  (load encrypted-el))
       ((file-exists-p literate)      (org-babel-load-file literate))
       ((file-exists-p plain)         (load plain))
       (t (message "attempted to load %s, not found" literate)))))
#+end_src

** Make compiler happy

These things usually get loaded by =init.el=, but the byte-compiler
doesn't know that, does it?

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'package)
    (setq package-selected-packages '(use-package))
    (package-initialize)
    (declare-function projectile-mode "projectile" (&optional ARG))
    (declare-function emess-set-up-elpy "configure-emacs" ())
    (declare-function secret-data-get-key "secret-data" (SOME-KEY &optional FILE-NAME))
    (declare-function undo-tree-mode "undo-tree" (&optional ARG))
    (declare-function global-company-mode "company" (&optional ARG))
    (declare-function smartparens-mode "smartparens" (&optional ARG))
    (declare-function smartparens-strict-mode "smartparens" (&optional ARG))
    (declare-function sp-use-paredit-bindings "smartparens" ())
    (declare-function form-feed-mode "form-feed" (&optional ARG))
    (declare-function yas-global-mode "yasnippet" (&optional ARG))
    (declare-function tern-mode "tern" (&optional arg))
    (declare-function smartparens-global-mode "smartparens" (&optional arg))
    ;; for unknown reason, still get error about yas-load-directory on compile
    (declare-function yas-load-directory "yasnippet" (top-level-dir &optional use-jit interactive)))
#+end_src

** Load secret data

I have a small module to separate sensitive data into a hidden
file. Load that module and read the data to set global variable.

#+begin_src emacs-lisp
  (emess-load-file (expand-file-name "secret-data" user-emacs-directory))
#+end_src

** A useful function

    * what this function does
    * why it's useful
    * explanation of `test` argument

#+begin_src emacs-lisp
  (defun emess-replace-cdrs (a-list current-value new-value &optional test)
    "For each element of A-LIST, if cdr is CURRENT-VALUE replace it with NEW-VALUE. Uses `eql' unless TEST is given."
    (let ((the-test (or test 'eql)))
      (mapc (lambda (a-cons)
              (if (funcall the-test (cdr a-cons) current-value)
                  (setcdr a-cons new-value)))
            a-list)))
#+end_src

** Install external packages

This needs to be broken out into separate files grouping packages that
are typically used together. Since the initialization code is under
heavy development, leaving it here for now.

#+begin_src emacs-lisp
  (defun emess-install-other-packages ()
    "Use `use-package' to install other desired packages."

    ;; GNU Hyperbole: The Everyday Hypertextual Information Manager
    ;; contains a number of useful functions usable anywhere
    (use-package "hyperbole"
      :ensure t ;; if it's not installed, install it
      :bind (("C-M-RET" . assist-key)
             ("C-h h" . hyperbole))
      ;; \C-h h should be bound by package, and
      ;; hyperbole-web-search-alist is missing
      :config (setq hyperbole-web-search-alist nil))

    ;; Manage and navigate projects in Emacs easily
    (use-package "projectile"
      :ensure t
      :config (projectile-mode))

    ;; projectile-speedbar requires sr-speedbar
    (use-package "sr-speedbar"
      :ensure t)

    (use-package "projectile-speedbar" ;; speedbar integration for projectile
      :ensure t)

    (use-package "async" ;; Asynchronous processing in Emacs
      :ensure t)

    (use-package "paradox" ;; A modern Packages Menu. Colored, with package ratings, and customizable.
      :ensure t
      :config (setq paradox-github-token
                    (secret-data-get-key "paradox-github-token")
                    paradox-automatically-star nil)
      :defer)

    (use-package "shrink-whitespace" ;; Whitespace removal DWIM key
      :ensure t)

    (use-package "undo-tree" ;; Treat undo history as a tree
      :ensure t
      :config (progn
		(defun turn-on-undo-tree ()
                  (undo-tree-mode 1))
		(message "setting up undo-tree")
		(add-hook 'prog-mode-hook 'turn-on-undo-tree)
		(add-hook 'org-mode-hook 'turn-on-undo-tree)))

    (use-package "elpy" ;; Emacs Python Development Environment
      :ensure t
      :config (progn
		(defun emess-set-up-elpy ()
                  ;; because I don't like highlight-indentation:
                  (setq elpy-modules '(elpy-module-company
                                       elpy-module-eldoc
                                       elpy-module-flymake
                                       elpy-module-pyvenv
                                       elpy-module-yasnippet
                                       elpy-module-sane-defaults)
			;; because I never use python 2 if I can help it
			elpy-rpc-python-command "python3"
			;; because elpy usually guesses this wrong (but
			;; be careful if your system python is in
			;; unusual location!)
			;; TODO: check for Apple OSs
			pyvenv-virtualenvwrapper-python "/usr/bin/python"))
		(emess-set-up-elpy)
		(global-company-mode))
      :init (add-hook 'python-mode-hook 'elpy-mode)
      :defer)

    (use-package "jedi" ;; a Python auto-completion for Emacs
      :ensure t
      :defer)

    (use-package "js2-mode" ;; Improved JavaScript editing mode
      :ensure t
      :mode ("\\.jsw?\\'" "\\.jsm?\\'" "\\.es[5678]\\'")
      :interpreter ("node" "rhino" "gjs" "nodejs")
      :config (progn
		(message "setting up js2-mode")
		(message "mode for node interpreter is %s." (cdr (assoc-string "node" interpreter-mode-alist)))
		(setq js2-include-node-externs t
                      js2-strict-missing-semi-warning nil
                      js-enabled-frameworks '(javascript)
                      js-indent-level 2)
		(add-hook 'js2-mode-hook (lambda ()
                                           (tern-mode t)
                                           (setq indent-tabs-mode nil))))
      :defer)

    (use-package "web-mode" ;; major mode for editing web templates
      :ensure t
      :config (progn
		(defun emess-fix-web-alists ()
                  "Alter setup so that web-mode is used instead of html-mode."
                  (emess-replace-cdrs auto-mode-alist 'html-mode 'web-mode))
		(add-hook 'after-init-hook 'emess-fix-web-alists))
      :defer)

    (use-package "web-beautify" ;; Format HTML, CSS and JavaScript/JSON
     ;; requires node package js-beautify, which by itself is a good
     ;; reason to install node on your machine.
      :ensure t
      :defer
      :config (progn
		(eval-after-load 'js2-mode
                  (lambda ()
                    (if (boundp 'js2-mode-map)
			(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))))
		(eval-after-load 'json-mode
                  (lambda ()
                    (if (boundp 'json-mode-map)
			(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))))
		(eval-after-load 'sgml-mode
                  (lambda ()
                    (if (boundp 'html-mode-map)
			(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))))
		(eval-after-load 'css-mode
                  (lambda ()
                    (if (boundp 'css-mode-map)
			(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))))))

    (use-package "smartparens" ;; Automatic insertion, wrapping and paredit-like navigation with user defined pairs.
      :ensure t
      :config (progn
		(smartparens-global-mode)
		(sp-use-paredit-bindings)
		(defun emess-turn-on-sp-strict ()
                  ;; also emulate paredit's refusal to delete one delimiter in a pair
                  (smartparens-strict-mode +1))
		(add-hook 'lisp-mode-hook 'emess-turn-on-sp-strict)))

    (use-package "flx-ido" ;; flx integration for ido
      ;; flx: fuzzy matching with good sorting
      :ensure t)

    (use-package "magit" ;; A Git porcelain inside Emacs
      :ensure t
      :bind (("C-x g" . magit-status)
             ("C-x M-g" . magit-dispatch-popup))
      :defer)

    (use-package "flycheck-pyflakes" ;; Support pyflakes in flycheck (on-the-fly syntax checking)
      :ensure t
      :defer)

    ;; slime and all slime-* packages need to come from melpa
    ;; there are versions in marmalade but they're way old
    (use-package "slime" ;; Superior Lisp Interaction Mode for Emacs
      :ensure t
      :config (progn (setq inferior-lisp-program "/usr/bin/sbcl")
                     (setq slime-contribs '(slime-fancy)))
      :defer t)

    (use-package "form-feed" ;; Display ^L glyphs as horizontal lines
      :ensure t
      :config (progn
		(defun emess-form-feed-turn-on ()
                  (form-feed-mode 1))
		(add-hook 'emacs-lisp-mode-hook 'emess-form-feed-turn-on)))

    (use-package "yasnippet" ;; Yet another snippet extension for Emacs.
      :ensure t
      :config (progn
		(yas-global-mode 1)
		(yas-load-directory (expand-file-name "snippets" user-emacs-directory) t)))

    (use-package "less-css-mode" ;; Major mode for editing LESS CSS files (lesscss.org)
      :ensure t
      ;; :mode ("\\.less\\'" . less-css-mode) ;; mode sets this up in autoload
      :defer
      )

    (use-package "tern"   ;; Tern-powered JavaScript integration
      ;; note you must have tern installed!
      ;; `sudo npm -g install tern`
      :ensure t
      :defer)

    (use-package "json-mode" ;; Major mode for editing JSON files
      :ensure t
      :defer)

    (use-package "company-tern" ;; Tern backend for company-mode
      :ensure t
      :defer)

    (use-package "emr" ;; Emacs refactoring system
      :ensure t
      :defer))

  (define-key lisp-mode-shared-map (kbd "C-\\") 'completion-at-point)
  (define-key lisp-mode-shared-map (kbd "C-c v") 'eval-buffer)

  (emess-install-other-packages)
#+end_src

** Use regex searches by default.
#+begin_src emacs-lisp
  (global-set-key "\C-s" 'isearch-forward-regexp)
  (global-set-key "\C-r" 'isearch-backward-regexp)
  (global-set-key "\C-\M-s" 'isearch-forward)
  (global-set-key "\C-\M-r" 'isearch-backward)
#+end_src

** Rgrep
Rgrep is infinitely useful in multi-file projects.

(see [[elisp:(describe-function 'rgrep)]])

#+begin_src emacs-lisp
  (define-key global-map "\C-x\C-r" 'rgrep)
#+end_src

** Emacs Lisp
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp
   :END:

*** Cleanup function for .elc files
#+begin_src emacs-lisp
  (defun emess-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))

  (add-hook 'emess-coding-hook 'emess-remove-elc-on-save)

#+end_src

*** emacs-lisp-mode-hook
#+begin_src emacs-lisp
  (defun emess-set-up-lisp ()
    "Settings and initialization for `lisp-mode'."
    (setq indent-tabs-mode nil) ;; for indentation, use spaces, not tabs
    (lambda () (eldoc-mode +1)))

  (add-hook 'emacs-lisp-mode-hook 'emess-set-up-lisp)
  ;; (define-key emacs-lisp-mode-map (kbd "C-c v") #'eval-buffer)
#+end_src

** Configuration for each buffer

#+begin_src emacs-lisp
  (defun emess-local-column-number-mode ()
    "Enable column-number-mode in local buffer."
    (make-local-variable 'column-number-mode)
    (column-number-mode t))

  (defun emess-local-comment-auto-fill ()
    "Enable local comment-only auto-fill in the current buffer."
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (auto-fill-mode t))

  (add-hook 'emess-coding-hook 'emess-local-column-number-mode)
  (add-hook 'emess-coding-hook 'emess-local-comment-auto-fill)

  (defun emess-run-coding-hook ()
    "Enable things that are convenient across all coding buffers."
    (run-hooks 'emess-coding-hook))

  (add-hook 'prog-mode-hook 'emess-run-coding-hook)
#+end_src

** Set up better default behavior

#+begin_src emacs-lisp
  (emess-load-file (expand-file-name "better-emacs-defaults" user-emacs-directory))
#+end_src

** My version of zap-to-char
This version deletes chars up to but *not* including the character
typed, which I find far more intuitive/useful.

#+begin_src emacs-lisp
  (defun zap-up-to-char (arg char)
    "Kill up to but not including ARGth occurrence of CHAR.
  Case is ignored if `case-fold-search' is non-nil in the current buffer.
  Goes backward if ARG is negative; error if CHAR not found."
    (interactive (list (prefix-numeric-value current-prefix-arg)
                       (read-char "Zap up to char: " t)))
    (kill-region (point) (progn
                           (search-forward (char-to-string char) nil nil arg)
                           (backward-char (cl-signum arg))
                           (point))))

  (global-set-key "\M-z" #'zap-up-to-char)
#+end_src

** Transparently open compressed files

#+begin_src emacs-lisp
  (auto-compression-mode)
#+end_src

** Highlight matching parentheses when the point is on them.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** ido mode

Set up ido-mode to add auto-completion to prompts, etc.
#+begin_src emacs-lisp
  (when (> emacs-major-version 21)
    (ido-mode t)
    (setq ido-enable-prefix nil          ;; allow match to any part of name
          ido-enable-flex-matching t     ;; more flexible matches
          ido-create-new-buffer 'always  ;; create new buffer if no match?
          ido-use-filename-at-point nil  ;; use text at point as starter for filename selection
          ;; I find the above feature more annoying than helpful
          ido-max-prospects 10))
#+end_src

** Setup and options for Org Mode

#+begin_src emacs-lisp
  (emess-load-file (expand-file-name "configure-emacs-org" user-emacs-directory))
#+end_src

** Setup and options for CIDER (Clojure)

This needs a customization variable, probably a set of checkboxes to enable various subsystems.

#+BEGIN_SRC emacs-lisp
  (emess-load-file "configure-emacs-clojure")
#+END_SRC

** Forth setup
This should be a modular file, but for now this will do. We use the
forth-mode implementation that comes with [[https://www.gnu.org/software/gforth/][Gforth]]. Just copy
=gforth.el= and =gforth-init.el= to the =src= subdirectory.

#+BEGIN_SRC emacs-lisp
  (let* ((fname (expand-file-name "src/gforth-init" user-emacs-directory))
         (el-name (concat fname ".el")))
    (if (file-exists-p el-name)
        (emess-load-file fname)
      (message "not found: %s" el-name)))
#+END_SRC

** Setup and options for Markdown

#+BEGIN_SRC emacs-lisp
  (emess-load-file "configure-emacs-markdown")
#+END_SRC

** Setup and options for Javascript

We set up `js2-mode` to automatically turn on tern mode. However,
plain `js-mode` is built in. We don't set this up in `tern`'s
`use-package` declaration because it uses deferred loading, and we
want to turn on `tern-mode` for javascript even if it hasn't loaded
yet. So,

#+BEGIN_SRC emacs-lisp
  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
#+END_SRC

** Setup and options for PHP

Some of us are forced to work with PHP even though we'd much rather
not. ;-) For those poor souls there's `php-mode` and some handy
extras.

#+BEGIN_SRC emacs-lisp
  (emess-load-file "configure-emacs-php")
#+END_SRC

** local and user customizations

#+begin_src emacs-lisp
  (emess-load-file "local")
  (emess-load-file user-login-name)
#+end_src

** Enable server mode

This starts a background process running Emacs as a server, so that
future execution of =emacsclient= will open a buffer in the existing
Emacs instance, instead of starting a new one.

Note it is also possible to run emacs in pure server mode, with

: emacs --daemon

However, I have had problems with the daemon not being able to open a
frame.

#+begin_src emacs-lisp
  (require 'server)
  (defun start-server-if-none ()
    "Start the server processes, unless another process already has."
    ;; test copied from server.el
    (let ((file (expand-file-name "server"
                                  (if server-use-tcp
                                      server-auth-dir
                                    server-socket-dir))))
      (if (not (file-exists-p file))
          (server-start))))
  (start-server-if-none)

#+end_src

# Local Variables:
# indent-tabs-mode: nil
# End:
