# Emacs Initialization and Setup

## A Primer And Example

### Introduction

Emacs is a great editor. Actually, it is the One True Editor, the
Platonic ideal of which all other editors are imperfect shadows.

#### say "hello"
#+begin_src emacs-lisp
  (message "loaded configure-emacs")
#+end_src

#+begin_src emacs-lisp
  (defun emess-install-other-packages ()
    "Use `use-package' to install other desired packages."

    ;; GNU Hyperbole: The Everyday Hypertextual Information Manager
    (use-package "hyperbole"
      :ensure t ;; if it's not installed, install it
      :bind (([C-M-return] . assist-key)
             (("\C-hh") . #'hyperbole)
             ))
    ;; \C-h h should be bound by package, but...

    ;; Manage and navigate projects in Emacs easily
    (use-package "projectile"
      :ensure t
      :config (lambda ()
                (projectile-mode)))

    ;; projectile-speedbar requires sr-speedbar
    ;; which appears to be broken, dammit
    ;; (use-package "projectile-speedbar"
    ;;   :ensure t)

    (use-package "async"
      :ensure t)

    (use-package "org"
      :ensure t)

    (use-package "paradox"
      :ensure t)

    (use-package "shrink-whitespace"
      :ensure t)

    (use-package "undo-tree"
      :ensure t)

    (use-package "elpy"
      :ensure t
      :defer
      :config (lambda ()
                (progn
                  (defun emess-turn-on-elpy-mode ()
                    (require 'elpy)
                    (elpy-mode))
                  (add-hook 'python-mode-hook emess-turn-on-elpy-mode))))

    (use-package "jedi"
      :ensure t
      :defer)

    (use-package "js2-mode"
      :ensure t
      :defer)

    (use-package "web-mode"
      :ensure t
      :defer)

    (use-package "web-beautify"
      :ensure t
      :defer)

    (use-package "smartparens"
      :ensure t
      :config (lambda ()
                (defun emess-turn-on-smartparens ()
                  (smartparens-mode +1)
                  ;; also emulate paredit's refusal to delete one delimiter in a pair
                  (smartparens-strict-mode +1)
                  ;; I find paredit bindings more convenient w/PC keyboards
                  (sp-use-paredit-bindings))
                (add-hook 'lisp-mode-hook 'emess-turn-on-smartparens)))

    (use-package "flx-ido"
      :ensure t)

    (use-package "magit"
      :ensure t
      :bind ((("\C-xg") . magit-status)
             (("\C-x\M-g") . magit-dispatch-popup)))

    (use-package "flycheck-pyflakes"
      :ensure t)

    (use-package "slime"
      :ensure t)

    (use-package "form-feed"
      :ensure t
      :config (lambda ()
                (defun emess-form-feed-turn-on ()
                  (form-feed-mode 1))
                (add-hook 'emacs-lisp-mode-hook #'emess-form-feed-turn-on))))

  (define-key lisp-mode-shared-map (kbd "C-\\") 'completion-at-point)
  (define-key lisp-mode-shared-map (kbd "C-c v") 'eval-buffer)

  (emess-install-other-packages)
#+end_src

** Use regex searches by default.
#+begin_src emacs-lisp
  (global-set-key "\C-s" 'isearch-forward-regexp)
  (global-set-key "\C-r" 'isearch-backward-regexp)
  (global-set-key "\C-\M-s" 'isearch-forward)
  (global-set-key "\C-\M-r" 'isearch-backward)
#+end_src

** Rgrep
Rgrep is infinitely useful in multi-file projects.

(see [[elisp:(describe-function 'rgrep)]])

#+begin_src emacs-lisp
  (define-key global-map "\C-x\C-r" 'rgrep)
#+end_src

** Load secret data

I have a small module to separate sensitive data into a hidden
fihle. Load that module and read the data to set global variable.

#+begin_src emacs-lisp
  (org-babel-load-file "secret-data.org")
#+end_src

** Set up org-babel supported languages

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (clojure . t)
     (css . t)
     (emacs-lisp . t)
     (js . t)
     (lisp . t)
     (org . t)
     (python . t)
     (R . t)
     (ruby . t)
     (sass . t)
     (scheme . t)
     (sh . t)
     (sql . t)))
#+end_src

** Emacs Lisp
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp
   :END:

*** Cleanup function for .elc files
#+begin_src emacs-lisp
  (defun emess-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
	      (lambda ()
		(if (file-exists-p (concat buffer-file-name "c"))
		    (delete-file (concat buffer-file-name "c"))))))
#+end_src

*** emacs-lisp-mode-hook
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook (lambda () (eldoc-mode +1)))
  (add-hook 'emacs-lisp-mode-hook #'emess-remove-elc-on-save)

  ;; (define-key emacs-lisp-mode-map (kbd "C-c v") #'eval-buffer)
  ;; for indentation, use spaces, not tabs
  (defun emess-turn-off-indent-tabs ()
    (setq indent-tabs-mode nil))
  (add-hook 'emacs-lisp-mode-hook #'emess-turn-off-indent-tabs)
#+end_src

** Configuration for each buffer

#+begin_src emacs-lisp
  (defun emess-local-column-number-mode ()
    "Enable column-number-mode in local buffer."
    (make-local-variable 'column-number-mode)
    (column-number-mode t))

  (defun emess-local-comment-auto-fill ()
    "Enable local comment-only auto-fill in the current buffer."
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (auto-fill-mode t))

  (defun emess-turn-on-undo-tree ()
    "Turn on undo-tree-mode."
    (undo-tree-mode 1))

  (add-hook 'emess-coding-hook #'emess-local-column-number-mode)
  (add-hook 'emess-coding-hook #'emess-local-comment-auto-fill)

  (defun emess-run-coding-hook ()
    "Enable things that are convenient across all coding buffers."
    (run-hooks 'emess-coding-hook))

#+end_src
** Set up better default behavior

#+begin_src emacs-lisp
  (org-babel-load-file "better-emacs-defaults.org")
#+end_src
** Transparently open compressed files
#+begin_src emacs-lisp
  (auto-compression-mode)
#+end_src
** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src


** ido mode
Set up ido-mode to add auto-completion to prompts, etc.
#+begin_src emacs-lisp
  (when (> emacs-major-version 21)
    (ido-mode t)
    (setq ido-enable-prefix nil          ;; allow match to any part of name
	  ido-enable-flex-matching t     ;; more flexible matches
	  ido-create-new-buffer 'always  ;; create new buffer if no match?
	  ido-use-filename-at-point nil  ;; use text at point as starter for filename selection
	  ;; I find the above more annoying than helpful
	  ido-max-prospects 10))
#+end_src
** local and user customizations

#+begin_src emacs-lisp
  ;; more or less straight steal from emacs24-starter-kit (https://eschulte.github.io/emacs24-starter-kit/)
  (defun emess-load-file (base)
    "Load file with name `base', checking multiple file extensions"
    (let* ((path  (expand-file-name base user-emacs-directory))
           (literate      (concat path ".org"))
           (encrypted-org (concat path ".org.gpg"))
           (plain         (concat path ".el"))
           (encrypted-el  (concat path ".el.gpg")))
      (cond
       ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
       ((file-exists-p encrypted-el)  (load encrypted-el))
       ((file-exists-p literate)      (org-babel-load-file literate))
       ((file-exists-p plain)         (load plain))
       (t (message "attempted to load %s, not found" literate)))))

  (defun remove-extension (name)
    (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
    (match-string 1 name))

  (emess-load-file "local")
  (emess-load-file user-login-name)
#+end_src
