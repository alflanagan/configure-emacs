# Emacs Initialization and Setup

** A Primer And Example

*** Introduction

Emacs is a great editor.

*** say "hello"
#+begin_src emacs-lisp
  (message "loaded configure-emacs")
#+end_src

** A function to load files

This is like `load', except that it checks the file extension and does
the right thing for .org files that have embedded code sections.

#+begin_src emacs-lisp
  ;; more or less straight steal from emacs24-starter-kit (https://eschulte.github.io/emacs24-starter-kit/)
  (defun emess-load-file (base)
    "Load file with name `base', checking multiple file extensions"
    (let* ((path  (expand-file-name base user-emacs-directory))
           (literate      (concat path ".org"))
           (encrypted-org (concat path ".org.gpg"))
           (plain         (concat path ".el"))
           (encrypted-el  (concat path ".el.gpg")))
      (cond
       ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
       ((file-exists-p encrypted-el)  (load encrypted-el))
       ((file-exists-p literate)      (org-babel-load-file literate))
       ((file-exists-p plain)         (load plain))
       (t (message "attempted to load %s, not found" literate)))))

#+end_src

** Make compiler happy

These things usually get loaded by =init.el=, but the byte-compiler
doesn't know that, does it?

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'package)
    (setq package-selected-packages '(use-package))
    (package-initialize)
    nil)
#+end_src

** Load secret data

I have a small module to separate sensitive data into a hidden
fihle. Load that module and read the data to set global variable.

#+begin_src emacs-lisp
  (emess-load-file (expand-file-name "secret-data" user-emacs-directory))
#+end_src

** A useful function

#+begin_src emacs-lisp
  (defun emess-replace-cdrs (a-list current-value new-value &optional test)
    "For each element of A-LIST, if cdr is CURRENT-VALUE replace it with NEW-VALUE. Uses `eql' unless TEST is given."
    (let ((the-test (or test 'eql)))
      (mapc (lambda (a-cons)
              (if (funcall the-test (cdr a-cons) current-value)
                  (setcdr a-cons new-value)))
            a-list)))
#+end_src

** Install external packages

This needs to be broken out into separate files grouping packages that
are typically used together. Since the initialization code is under
heavy development, leaving it here for now.

#+begin_src emacs-lisp
  (defun emess-install-other-packages ()
    "Use `use-package' to install other desired packages."

    ;; GNU Hyperbole: The Everyday Hypertextual Information Manager
    (use-package "hyperbole"
      :ensure t ;; if it's not installed, install it
      :bind (("C-M-RET" . assist-key)
             ("C-h h" . hyperbole))
      ;; \C-h h should be bound by package, and
      ;; hyperbole-web-search-alist is missing
      :config (setq hyperbole-web-search-alist nil))

    ;; Manage and navigate projects in Emacs easily
    (use-package "projectile"
      :ensure t
      :config (projectile-mode))

    ;; projectile-speedbar requires sr-speedbar
    ;; which appears to be broken, dammit
    ;; (use-package "projectile-speedbar"
    ;;   :ensure t)

    (use-package "async"
      :ensure t)

    (use-package "org"
      :ensure t)

    (use-package "paradox"
      :ensure t
      :config (setq paradox-github-token
                    (secret-data-get-key "paradox-github-token")))

    (use-package "shrink-whitespace"
      :ensure t)

    (use-package "undo-tree"
      :ensure t
      :config (progn
                (defun turn-on-undo-tree ()
                  (undo-tree-mode 1))
                (message "setting up undo-tree")
                (add-hook 'prog-mode-hook 'turn-on-undo-tree)
                (add-hook 'org-mode-hook 'turn-on-undo-tree)))

    (use-package "elpy"
      :ensure t
      :config (progn
                (defun emess-set-up-elpy ()
                  (setq elpy-modules '(elpy-module-company elpy-module-eldoc elpy-module-flymake elpy-module-pyvenv
                                                           elpy-module-yasnippet elpy-module-sane-defaults)
                        elpy-rpc-python-command "python3"
                        pyvenv-virtualenvwrapper-python "/usr/bin/python"))
                (add-hook 'after-init-hook 'emess-set-up-elpy)
                (add-hook 'python-mode-hook 'elpy-mode)
                (global-company-mode)))

    (use-package "jedi"
      :ensure t
      :defer)

    (use-package "js2-mode"
      :ensure t
      :init (progn
              (message "running :init for js-mode!!")
              (defun emess-fix-js2-alists ()
                "Alter setup so that js2-mode is used instead of js-mode."
                (emess-replace-cdrs interpreter-mode-alist 'js-mode 'js2-mode)
                (emess-replace-cdrs auto-mode-alist 'javascript-mode 'js2-mode))
              (add-hook 'after-init-hook 'emess-fix-js2-alists))
        :config (progn
                (message "setting up js2-mode")
                (message "mode for node interpreter is %s." (assq "node" interpreter-mode-alist))
                (setq js2-include-node-externs t
                      js2-skip-preprocessor-directives t
                      js2-strict-missing-semi-warning nil)
                (add-hook 'js2-mode-hook 'emess-turn-on-smartparens)))

    (use-package "web-mode"
      :ensure t
      :defer)

    (use-package "web-beautify"
      :ensure t
      :defer)

    (use-package "smartparens"
      :ensure t
      :config (progn
                (defun emess-turn-on-smartparens ()
                  (smartparens-mode +1)
                  ;; also emulate paredit's refusal to delete one delimiter in a pair
                  (smartparens-strict-mode +1)
                  ;; I find paredit bindings more convenient w/PC keyboards
                  (sp-use-paredit-bindings))
                (add-hook 'lisp-mode-hook 'emess-turn-on-smartparens)))

    (use-package "flx-ido"
      :ensure t)

    (use-package "magit"
      :ensure t
      :bind (("C-x g" . magit-status)
             ("C-x M-g" . magit-dispatch-popup)))

    (use-package "flycheck-pyflakes"
      :ensure t)

    (use-package "slime"
      :ensure t)

    (use-package "form-feed"
      :ensure t
      :config (progn
                (defun emess-form-feed-turn-on ()
                  (form-feed-mode 1))
                (add-hook 'emacs-lisp-mode-hook 'emess-form-feed-turn-on)))

    (use-package "yasnippet"
      :ensure t
      :config (progn
                (require 'yasnippet)
                (yas-global-mode 1)
                (yas-load-directory (expand-file-name "snippets" user-emacs-directory)))))

  (define-key lisp-mode-shared-map (kbd "C-\\") 'completion-at-point)
  (define-key lisp-mode-shared-map (kbd "C-c v") 'eval-buffer)

  (emess-install-other-packages)
#+end_src

** Use regex searches by default.
#+begin_src emacs-lisp
  (global-set-key "\C-s" 'isearch-forward-regexp)
  (global-set-key "\C-r" 'isearch-backward-regexp)
  (global-set-key "\C-\M-s" 'isearch-forward)
  (global-set-key "\C-\M-r" 'isearch-backward)
#+end_src

** Rgrep
Rgrep is infinitely useful in multi-file projects.

(see [[elisp:(describe-function 'rgrep)]])

#+begin_src emacs-lisp
  (define-key global-map "\C-x\C-r" 'rgrep)
#+end_src

** Set up org-babel supported languages

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (clojure . t)
     (css . t)
     (emacs-lisp . t)
     (js . t)
     (lisp . t)
     (org . t)
     (python . t)
     (R . t)
     (ruby . t)
     (sass . t)
     (scheme . t)
     (sh . t)
     (sql . t)))
#+end_src

** Emacs Lisp
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp
   :END:

*** Cleanup function for .elc files
#+begin_src emacs-lisp
  (defun emess-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))

  (add-hook 'emess-coding-hook 'emess-remove-elc-on-save)

#+end_src

*** emacs-lisp-mode-hook
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook (lambda () (eldoc-mode +1)))
  (add-hook 'emacs-lisp-mode-hook 'emess-remove-elc-on-save)

  ;; (define-key emacs-lisp-mode-map (kbd "C-c v") #'eval-buffer)
  ;; for indentation, use spaces, not tabs
  (defun emess-turn-off-indent-tabs ()
    (setq indent-tabs-mode nil))
  (add-hook 'emacs-lisp-mode-hook 'emess-turn-off-indent-tabs)
#+end_src

** Configuration for each buffer

#+begin_src emacs-lisp
  (defun emess-local-column-number-mode ()
    "Enable column-number-mode in local buffer."
    (make-local-variable 'column-number-mode)
    (column-number-mode t))

  (defun emess-local-comment-auto-fill ()
    "Enable local comment-only auto-fill in the current buffer."
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (auto-fill-mode t))

  (add-hook 'emess-coding-hook 'emess-local-column-number-mode)
  (add-hook 'emess-coding-hook 'emess-local-comment-auto-fill)

  (defun emess-run-coding-hook ()
    "Enable things that are convenient across all coding buffers."
    (run-hooks 'emess-coding-hook))

  (add-hook 'prog-mode-hook 'emess-run-coding-hook)
#+end_src

** Set up better default behavior

#+begin_src emacs-lisp
  (emess-load-file (expand-file-name "better-emacs-defaults" user-emacs-directory))
#+end_src

** Transparently open compressed files

#+begin_src emacs-lisp
  (auto-compression-mode)
#+end_src

** Highlight matching parentheses when the point is on them.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** ido mode

Set up ido-mode to add auto-completion to prompts, etc.
#+begin_src emacs-lisp
  (when (> emacs-major-version 21)
    (ido-mode t)
    (setq ido-enable-prefix nil          ;; allow match to any part of name
          ido-enable-flex-matching t     ;; more flexible matches
          ido-create-new-buffer 'always  ;; create new buffer if no match?
          ido-use-filename-at-point nil  ;; use text at point as starter for filename selection
          ;; I find the above more annoying than helpful
          ido-max-prospects 10))
#+end_src

** local and user customizations

#+begin_src emacs-lisp

  (defun emess-load-custom ()
    "Load the local files =local.el= and =<username>.el=, if present."
    (emess-load-file "local")
    (emess-load-file user-login-name))

  (add-hook 'after-init-hook
            'emess-load-custom)
#+end_src

** Enable server mode

This starts a background process running Emacs as a server, so that
future execution of =emacsclient= will open a buffer in the existing
Emacs instance, instead of starting a new one.

Note it is also possible to run emacs in pure server mode, with

: emacs --daemon

However, I have had problems with the daemon not being able to open a
frame.

#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'server-start)
#+end_src
